using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;
using RealEstate.Common;
using RealEstate.Common.Enumerations;
using RealEstate.Common.Helpers;
using RealEstate.DataAccess;
using RealEstate.DataAccess.SearchCriteria;

namespace Realtor.DTL
{
	public interface IDataManager
	{
		List<City> GetCities(State state, bool isOfflineMode);
		List<Remont> GetRemonts(bool isOfflineMode);
		List<BuildingType> GetBuildingTypes(bool isOfflineMode);
		List<OrderType> GetOrderTypesForEstate(User user, bool isOfflineMode);
		List<EstateType> GetEstateTypes(User user, bool isOfflineMode);
		List<Currency> GetCurrencies(bool isOfflineMode);
		bool UpdateEstate(Estate estate, ref StringBuilder errorMessage);
		bool UpdateImages(int estateId, ObservableCollection<EstateImage> estateImages, ref StringBuilder errorMessage);
		int SaveImages(int estateId, ObservableCollection<EstateImage> estateImages, ref StringBuilder errorMessage);
		int SaveRealEstate(Estate estate, ref StringBuilder errorMessage);
		List<Project> GetProjects(bool isOfflineMode);
		List<Street> GetStreets(Region region, bool isOfflineMode);
		ObservableCollection<Estate> GetLastAdded20RealEstates(User user, bool isOfflineMode);
		bool DeleteEstate(Estate estate);
		ObservableCollection<Estate> GetSearchedRealEstates(RealEstateSearchParameters searchParameters, User user, out int totalItems, bool isOfflineMode);
		void RemoveImage(int imageId);
		List<Region> GetRegions(int cityID, User user, bool isOfflineMode);
		List<Street> GetStreets(bool isOfflineMode);
		ObservableCollection<Estate> GetEstatesByIDs(List<int> ids, bool isOfflineMode, User user);
		List<State> GetStates(User user, bool isOfflineMode);
		List<EarthPlaceTypeEntity> GetEarthPlaceTypes();
		List<GarageTypeEntity> GetGarageTypes();
		List<OfficePlaceTypeEntity> GetOfficePlaceTypes();
		List<ReportTypeEntity> GetReportTypes();
		List<Role> GetRoles();
		ObservableCollection<User> GetUsers(bool isOfflineMode);
		bool AddUser(User user);
		bool UpdateUser(User user);
		User Login(string userName, string password, bool isOfflineMode);
		ObservableCollection<NeededEstate> GetDemandsByBroker(int brokerID, bool isOfflineMode);
		ObservableCollection<NeededEstate> GetAllDemands(User user, DemandSearchCriteria criteria, bool isOfflineMode);
		bool SaveDemand(NeededEstate demand);
		bool UpdateDemand(NeededEstate demand);
		List<User> GetBrokers(bool isOfflineMode);
		int GetEstatesCount(bool isOfflineMode);
		List<EstateType> GetEstateTypes(IEnumerable<int> estateTypeIDs, bool isOfflineMode);
		void AddToFavoriteEstates(int userID, List<int> estateIDs);
		ObservableCollection<FavoriteEstate> GetFavoriteEstates(int userID, bool isOfflineMode);
		void DeleteFavoriteEstate(List<int> favoriteEstatesIDs);
		bool DeleteDemand(NeededEstate demand);
		int DeleteDemands(IEnumerable<NeededEstate> demands);
		bool UpdateBuildingType(BuildingType buildingType);
		bool AddBuildingType(BuildingType buildingType);
		bool DeleteBuildingType(BuildingType buildingType);
		bool DeleteState(State state);
		bool UpdateState(State state);
		bool AddState(State state);
		bool UpdateRemont(Remont remont);
		bool AddRemont(Remont remont);
		bool DeleteRemont(Remont remont);
		bool DeleteProject(Project project);
		bool UpdateProject(Project project);
		bool AddProject(Project project);
		bool DeleteCurrency(Currency currency);
		bool AddCurrency(Currency currency);
		bool UpdateCurrency(Currency currency);
		bool DeleteCity(City city);
		bool UpdateCity(City city);
		bool AddCity(City city);
		bool DeleteRegion(Region region);
		bool AddRegion(Region region);
		bool UpdateRegion(Region region);
		bool DeleteStreet(Street street);
		bool UpdateStreet(Street street);
		bool AddStreet(Street street);
		bool CreateDatabaseBackup(string backupFilePath, ref string errorMessage);
		bool RestoreDatabase(string backupFilePath, string dataFolderPath, ref string errorMessage);
		List<SelledEstate> GetSoldEstates(SoldRentedEstateCriteria SearchCriteria, bool isOfflineMode);
		bool EstateMarkAsSelled(SelledEstate estate);
		bool UpdateSelledEstate(SelledEstate sellEstate);
		bool EstateMarkAsRented(RentedEstate rentedEstate);
		bool UpdateRentedEstate(RentedEstate rentEstate);
		List<RentedEstate> GetRentedEstates(SoldRentedEstateCriteria searchCriteria, bool isOfflineMode);
		bool UploadEstate(Estate estate, IEnumerable<EstateImage> images);
		bool ReturnSelledEstateToEstatesList(SelledEstate estate);
		bool ReturnRentedEstateToEstatesList(RentedEstate rentedEstate);
		int GetAllDemansCount(bool isOfflineMode);
		User GetUser(int id, bool isOfflineMode);
		Currency GetCurrency(int id, bool isOfflineMode);
		List<NeededEstate> GetDemandsForEstate(Estate estate, User user, bool isOfflineMode);
		bool ValidateUser(string userName);
		bool CheckEstate(Estate realEstate);
		List<SignificanceOfTheUse> GetSignificanceOfTheUses(EstateType estateType, bool isOfflineMode);
		List<OperationalSignificance> GetOperationalSignificances(SignificanceOfTheUse significanceOfTheUse, bool isOfflineMode);
		bool ValidateEstateCode(Estate estate);
		List<Roofing> GetRoofings(bool isOfflineMode);
		bool DeleteRoofing(Roofing roofing);
		bool UpdateRoofing(Roofing roofing);
		bool AddRoofing(Roofing roofing);
		bool DeleteSignificanceOfTheUse(SignificanceOfTheUse bt);
		bool UpdateSignificanceOfTheUse(SignificanceOfTheUse significanceOfTheUse);
		bool AddSignificanceOfTheUse(SignificanceOfTheUse significanceOfTheUse);
		bool UpdateoperationalSignificance(OperationalSignificance operationalSignificance);
		bool AddOperationalSignificance(OperationalSignificance operationalSignificance);
		bool DeleteOperationalSignificance(OperationalSignificance operationalSignificance);
		void EstateMarkAsUploaded(Estate estate);
		List<Estate> CheckRentedEstates();
		int SaveVideos(int estateId, ObservableCollection<string> estateVideos, ref StringBuilder errorMessage);
		void DeleteVideo(string videoPath);
		ObservableCollection<Convenient> GetConvenients(bool isOfflineMode);
		bool DeleteUser(User user);
		ObservableCollection<NeededEstate> GetDemands(DemandSearchCriteria criteria);
		bool CheckDemandExisting(NeededEstate demand);
		ObservableCollection<BlackListItem> GetBlackListItems(BlackListSearchCriteria searchCriteria, bool isOfflineMode);
		bool AddBlackListItem(BlackListItem number);
		bool UpdateBlackListNumber(BlackListNumber number);
		bool DeleteBlackListNumber(BlackListNumber number);
		bool UpdateBlackListItem(BlackListItem blackListItem);
		bool DeleteBlackListItem(BlackListItem item);
		bool AddEstateShowInfo(EstatesAndDemand showInfo);
		ObservableCollection<Estate> SearchEstatesForShowDemand(DemandSearchCriteria searchParameters, bool isOfflineMode);
		ObservableCollection<EstatesAndDemand> GetAllDemandsWithShowedEstates(User user, DemandSearchCriteria demandSearchCriteria, bool isOfflineMode);
		ObservableCollection<EstatesAndDemand> GetShowedToClientsEstates(RealEstateSearchParameters realEstateSearchParameters, User user, bool isOfflineMode);
		ObservableCollection<EstatesAndDemand> GetShowedEstatesForDemand(int demandID, bool isOfflineMode);
		ObservableCollection<EstatesAndDemand> GetShowedClientsForEstate(int estateID, bool isOfflineMode);
		bool DeleteShoingInfo(EstatesAndDemand item);
		bool DeleteRentedEstate(RentedEstate rentedEstate);
		ReportData GetBrokerReportData(StatisticSearchCriteria selectedBroker, bool isOfflineMode);
		ReportData GetAgencyReportData(StatisticSearchCriteria searchCriteria, bool isOfflineMode);
		DateTime GetFirstAddedObjectDate(bool isOfflineMode);
		List<ReportData> GetReportByBrokers(StatisticSearchCriteria searchCriteria, bool isOfflineMode);
		ObservableCollection<Estate> GetDeletedEstates(SoldRentedEstateCriteria searchCriteria, bool offlineMode);
		List<User> GetUsersByRights(User user, bool isOfflineMode);
		bool DeleteConvenient(Convenient convenient);
		bool UpdateConvenient(Convenient convenient);
		bool AddConvenient(Convenient convenient);
		bool ReturnDeletedEstateToEstatesList(Estate estate);
	}
}
